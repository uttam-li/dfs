// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: api/proto/persistence.proto

package persistence

import (
	common "github.com/uttam-li/dfs/api/generated/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Log entry types for persistence
type LogEntryType int32

const (
	LogEntryType_LOG_ENTRY_UNKNOWN      LogEntryType = 0
	LogEntryType_LOG_ENTRY_CREATE_INODE LogEntryType = 1
	LogEntryType_LOG_ENTRY_DELETE_INODE LogEntryType = 2
	LogEntryType_LOG_ENTRY_UPDATE_INODE LogEntryType = 3
	LogEntryType_LOG_ENTRY_CREATE_CHUNK LogEntryType = 4
	LogEntryType_LOG_ENTRY_DELETE_CHUNK LogEntryType = 5
	LogEntryType_LOG_ENTRY_UPDATE_CHUNK LogEntryType = 6
	LogEntryType_LOG_ENTRY_LEASE_GRANT  LogEntryType = 7
	LogEntryType_LOG_ENTRY_LEASE_REVOKE LogEntryType = 8
	LogEntryType_LOG_ENTRY_CHECKPOINT   LogEntryType = 9
	LogEntryType_LOG_ENTRY_MKDIR        LogEntryType = 10
	LogEntryType_LOG_ENTRY_RMDIR        LogEntryType = 11
	LogEntryType_LOG_ENTRY_RENAME       LogEntryType = 12
	LogEntryType_LOG_ENTRY_SYMLINK      LogEntryType = 13
	LogEntryType_LOG_ENTRY_UNLINK       LogEntryType = 14
	LogEntryType_LOG_ENTRY_SETATTR      LogEntryType = 15
	LogEntryType_LOG_ENTRY_SETXATTR     LogEntryType = 16
	LogEntryType_LOG_ENTRY_REMOVEXATTR  LogEntryType = 17
)

// Enum value maps for LogEntryType.
var (
	LogEntryType_name = map[int32]string{
		0:  "LOG_ENTRY_UNKNOWN",
		1:  "LOG_ENTRY_CREATE_INODE",
		2:  "LOG_ENTRY_DELETE_INODE",
		3:  "LOG_ENTRY_UPDATE_INODE",
		4:  "LOG_ENTRY_CREATE_CHUNK",
		5:  "LOG_ENTRY_DELETE_CHUNK",
		6:  "LOG_ENTRY_UPDATE_CHUNK",
		7:  "LOG_ENTRY_LEASE_GRANT",
		8:  "LOG_ENTRY_LEASE_REVOKE",
		9:  "LOG_ENTRY_CHECKPOINT",
		10: "LOG_ENTRY_MKDIR",
		11: "LOG_ENTRY_RMDIR",
		12: "LOG_ENTRY_RENAME",
		13: "LOG_ENTRY_SYMLINK",
		14: "LOG_ENTRY_UNLINK",
		15: "LOG_ENTRY_SETATTR",
		16: "LOG_ENTRY_SETXATTR",
		17: "LOG_ENTRY_REMOVEXATTR",
	}
	LogEntryType_value = map[string]int32{
		"LOG_ENTRY_UNKNOWN":      0,
		"LOG_ENTRY_CREATE_INODE": 1,
		"LOG_ENTRY_DELETE_INODE": 2,
		"LOG_ENTRY_UPDATE_INODE": 3,
		"LOG_ENTRY_CREATE_CHUNK": 4,
		"LOG_ENTRY_DELETE_CHUNK": 5,
		"LOG_ENTRY_UPDATE_CHUNK": 6,
		"LOG_ENTRY_LEASE_GRANT":  7,
		"LOG_ENTRY_LEASE_REVOKE": 8,
		"LOG_ENTRY_CHECKPOINT":   9,
		"LOG_ENTRY_MKDIR":        10,
		"LOG_ENTRY_RMDIR":        11,
		"LOG_ENTRY_RENAME":       12,
		"LOG_ENTRY_SYMLINK":      13,
		"LOG_ENTRY_UNLINK":       14,
		"LOG_ENTRY_SETATTR":      15,
		"LOG_ENTRY_SETXATTR":     16,
		"LOG_ENTRY_REMOVEXATTR":  17,
	}
)

func (x LogEntryType) Enum() *LogEntryType {
	p := new(LogEntryType)
	*p = x
	return p
}

func (x LogEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_persistence_proto_enumTypes[0].Descriptor()
}

func (LogEntryType) Type() protoreflect.EnumType {
	return &file_api_proto_persistence_proto_enumTypes[0]
}

func (x LogEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEntryType.Descriptor instead.
func (LogEntryType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{0}
}

// Create inode log entry
type CreateInodeLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	ParentId      uint64                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Attributes    *common.FileAttributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	IsDirectory   bool                   `protobuf:"varint,5,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	Target        string                 `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"` // For symlinks
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInodeLogEntry) Reset() {
	*x = CreateInodeLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInodeLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInodeLogEntry) ProtoMessage() {}

func (x *CreateInodeLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInodeLogEntry.ProtoReflect.Descriptor instead.
func (*CreateInodeLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInodeLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *CreateInodeLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreateInodeLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInodeLogEntry) GetAttributes() *common.FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateInodeLogEntry) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *CreateInodeLogEntry) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Delete inode log entry
type DeleteInodeLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	ParentId      uint64                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInodeLogEntry) Reset() {
	*x = DeleteInodeLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInodeLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInodeLogEntry) ProtoMessage() {}

func (x *DeleteInodeLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInodeLogEntry.ProtoReflect.Descriptor instead.
func (*DeleteInodeLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteInodeLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *DeleteInodeLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DeleteInodeLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Update inode log entry
type UpdateInodeLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Attributes    *common.FileAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	FieldMask     []string               `protobuf:"bytes,3,rep,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"` // Which fields to update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInodeLogEntry) Reset() {
	*x = UpdateInodeLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInodeLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInodeLogEntry) ProtoMessage() {}

func (x *UpdateInodeLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInodeLogEntry.ProtoReflect.Descriptor instead.
func (*UpdateInodeLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateInodeLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *UpdateInodeLogEntry) GetAttributes() *common.FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateInodeLogEntry) GetFieldMask() []string {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Create chunk log entry
type CreateChunkLogEntry struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ChunkHandle   string                  `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	InodeId       uint64                  `protobuf:"varint,2,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	ChunkIndex    uint64                  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	Version       uint32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Locations     []*common.ChunkLocation `protobuf:"bytes,5,rep,name=locations,proto3" json:"locations,omitempty"`
	Size          int64                   `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Checksum      string                  `protobuf:"bytes,7,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChunkLogEntry) Reset() {
	*x = CreateChunkLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChunkLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkLogEntry) ProtoMessage() {}

func (x *CreateChunkLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkLogEntry.ProtoReflect.Descriptor instead.
func (*CreateChunkLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChunkLogEntry) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *CreateChunkLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *CreateChunkLogEntry) GetChunkIndex() uint64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *CreateChunkLogEntry) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateChunkLogEntry) GetLocations() []*common.ChunkLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *CreateChunkLogEntry) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateChunkLogEntry) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Delete chunk log entry
type DeleteChunkLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	InodeId       uint64                 `protobuf:"varint,2,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	ChunkIndex    uint64                 `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkLogEntry) Reset() {
	*x = DeleteChunkLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkLogEntry) ProtoMessage() {}

func (x *DeleteChunkLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkLogEntry.ProtoReflect.Descriptor instead.
func (*DeleteChunkLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteChunkLogEntry) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *DeleteChunkLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *DeleteChunkLogEntry) GetChunkIndex() uint64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

// Update chunk log entry
type UpdateChunkLogEntry struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ChunkHandle   string                  `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	Version       uint32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Locations     []*common.ChunkLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
	Size          int64                   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Checksum      string                  `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChunkLogEntry) Reset() {
	*x = UpdateChunkLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkLogEntry) ProtoMessage() {}

func (x *UpdateChunkLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkLogEntry.ProtoReflect.Descriptor instead.
func (*UpdateChunkLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateChunkLogEntry) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *UpdateChunkLogEntry) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateChunkLogEntry) GetLocations() []*common.ChunkLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *UpdateChunkLogEntry) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UpdateChunkLogEntry) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Lease grant log entry
type LeaseGrantLogEntry struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle    string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	PrimaryServer  string                 `protobuf:"bytes,2,opt,name=primary_server,json=primaryServer,proto3" json:"primary_server,omitempty"`
	ReplicaServers []string               `protobuf:"bytes,3,rep,name=replica_servers,json=replicaServers,proto3" json:"replica_servers,omitempty"`
	LeaseExpiry    int64                  `protobuf:"varint,4,opt,name=lease_expiry,json=leaseExpiry,proto3" json:"lease_expiry,omitempty"`
	Version        uint32                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LeaseGrantLogEntry) Reset() {
	*x = LeaseGrantLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseGrantLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseGrantLogEntry) ProtoMessage() {}

func (x *LeaseGrantLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseGrantLogEntry.ProtoReflect.Descriptor instead.
func (*LeaseGrantLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{6}
}

func (x *LeaseGrantLogEntry) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *LeaseGrantLogEntry) GetPrimaryServer() string {
	if x != nil {
		return x.PrimaryServer
	}
	return ""
}

func (x *LeaseGrantLogEntry) GetReplicaServers() []string {
	if x != nil {
		return x.ReplicaServers
	}
	return nil
}

func (x *LeaseGrantLogEntry) GetLeaseExpiry() int64 {
	if x != nil {
		return x.LeaseExpiry
	}
	return 0
}

func (x *LeaseGrantLogEntry) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Lease revoke log entry
type LeaseRevokeLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	PrimaryServer string                 `protobuf:"bytes,2,opt,name=primary_server,json=primaryServer,proto3" json:"primary_server,omitempty"`
	Version       uint32                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaseRevokeLogEntry) Reset() {
	*x = LeaseRevokeLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseRevokeLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRevokeLogEntry) ProtoMessage() {}

func (x *LeaseRevokeLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRevokeLogEntry.ProtoReflect.Descriptor instead.
func (*LeaseRevokeLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{7}
}

func (x *LeaseRevokeLogEntry) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *LeaseRevokeLogEntry) GetPrimaryServer() string {
	if x != nil {
		return x.PrimaryServer
	}
	return ""
}

func (x *LeaseRevokeLogEntry) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Checkpoint log entry
type CheckpointLogEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Timestamp          int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LastSequenceNumber uint64                 `protobuf:"varint,2,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"`
	CheckpointPath     string                 `protobuf:"bytes,3,opt,name=checkpoint_path,json=checkpointPath,proto3" json:"checkpoint_path,omitempty"`
	Checksum           string                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CheckpointLogEntry) Reset() {
	*x = CheckpointLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointLogEntry) ProtoMessage() {}

func (x *CheckpointLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointLogEntry.ProtoReflect.Descriptor instead.
func (*CheckpointLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{8}
}

func (x *CheckpointLogEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CheckpointLogEntry) GetLastSequenceNumber() uint64 {
	if x != nil {
		return x.LastSequenceNumber
	}
	return 0
}

func (x *CheckpointLogEntry) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *CheckpointLogEntry) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Directory operation log entries
type MkdirLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentId      uint64                 `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InodeId       uint64                 `protobuf:"varint,3,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Attributes    *common.FileAttributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MkdirLogEntry) Reset() {
	*x = MkdirLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MkdirLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirLogEntry) ProtoMessage() {}

func (x *MkdirLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirLogEntry.ProtoReflect.Descriptor instead.
func (*MkdirLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{9}
}

func (x *MkdirLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MkdirLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MkdirLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *MkdirLogEntry) GetAttributes() *common.FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type RmdirLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentId      uint64                 `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InodeId       uint64                 `protobuf:"varint,3,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RmdirLogEntry) Reset() {
	*x = RmdirLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RmdirLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirLogEntry) ProtoMessage() {}

func (x *RmdirLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirLogEntry.ProtoReflect.Descriptor instead.
func (*RmdirLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{10}
}

func (x *RmdirLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RmdirLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RmdirLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

type RenameLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldParentId   uint64                 `protobuf:"varint,1,opt,name=old_parent_id,json=oldParentId,proto3" json:"old_parent_id,omitempty"`
	OldName       string                 `protobuf:"bytes,2,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewParentId   uint64                 `protobuf:"varint,3,opt,name=new_parent_id,json=newParentId,proto3" json:"new_parent_id,omitempty"`
	NewName       string                 `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	InodeId       uint64                 `protobuf:"varint,5,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameLogEntry) Reset() {
	*x = RenameLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameLogEntry) ProtoMessage() {}

func (x *RenameLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameLogEntry.ProtoReflect.Descriptor instead.
func (*RenameLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{11}
}

func (x *RenameLogEntry) GetOldParentId() uint64 {
	if x != nil {
		return x.OldParentId
	}
	return 0
}

func (x *RenameLogEntry) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameLogEntry) GetNewParentId() uint64 {
	if x != nil {
		return x.NewParentId
	}
	return 0
}

func (x *RenameLogEntry) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

type SymlinkLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentId      uint64                 `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	InodeId       uint64                 `protobuf:"varint,4,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Attributes    *common.FileAttributes `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymlinkLogEntry) Reset() {
	*x = SymlinkLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymlinkLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkLogEntry) ProtoMessage() {}

func (x *SymlinkLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkLogEntry.ProtoReflect.Descriptor instead.
func (*SymlinkLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{12}
}

func (x *SymlinkLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *SymlinkLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymlinkLogEntry) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SymlinkLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *SymlinkLogEntry) GetAttributes() *common.FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type UnlinkLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentId      uint64                 `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InodeId       uint64                 `protobuf:"varint,3,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlinkLogEntry) Reset() {
	*x = UnlinkLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlinkLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkLogEntry) ProtoMessage() {}

func (x *UnlinkLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkLogEntry.ProtoReflect.Descriptor instead.
func (*UnlinkLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{13}
}

func (x *UnlinkLogEntry) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UnlinkLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnlinkLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

type SetattrLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Attributes    *common.FileAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	FieldMask     []string               `protobuf:"bytes,3,rep,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetattrLogEntry) Reset() {
	*x = SetattrLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetattrLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetattrLogEntry) ProtoMessage() {}

func (x *SetattrLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetattrLogEntry.ProtoReflect.Descriptor instead.
func (*SetattrLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{14}
}

func (x *SetattrLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *SetattrLogEntry) GetAttributes() *common.FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SetattrLogEntry) GetFieldMask() []string {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type SetxattrLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Flags         uint32                 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetxattrLogEntry) Reset() {
	*x = SetxattrLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetxattrLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetxattrLogEntry) ProtoMessage() {}

func (x *SetxattrLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetxattrLogEntry.ProtoReflect.Descriptor instead.
func (*SetxattrLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{15}
}

func (x *SetxattrLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *SetxattrLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetxattrLogEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SetxattrLogEntry) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type RemovexattrLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InodeId       uint64                 `protobuf:"varint,1,opt,name=inode_id,json=inodeId,proto3" json:"inode_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovexattrLogEntry) Reset() {
	*x = RemovexattrLogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovexattrLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovexattrLogEntry) ProtoMessage() {}

func (x *RemovexattrLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovexattrLogEntry.ProtoReflect.Descriptor instead.
func (*RemovexattrLogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{16}
}

func (x *RemovexattrLogEntry) GetInodeId() uint64 {
	if x != nil {
		return x.InodeId
	}
	return 0
}

func (x *RemovexattrLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Generic log entry wrapper
type LogEntry struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Timestamp      int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type           LogEntryType           `protobuf:"varint,3,opt,name=type,proto3,enum=dfs.LogEntryType" json:"type,omitempty"`
	OperationId    string                 `protobuf:"bytes,4,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"` // For idempotency
	Checksum       uint32                 `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"`                         // CRC32 checksum of the data
	// Types that are valid to be assigned to Data:
	//
	//	*LogEntry_CreateInode
	//	*LogEntry_DeleteInode
	//	*LogEntry_UpdateInode
	//	*LogEntry_CreateChunk
	//	*LogEntry_DeleteChunk
	//	*LogEntry_UpdateChunk
	//	*LogEntry_LeaseGrant
	//	*LogEntry_LeaseRevoke
	//	*LogEntry_Checkpoint
	//	*LogEntry_Mkdir
	//	*LogEntry_Rmdir
	//	*LogEntry_Rename
	//	*LogEntry_Symlink
	//	*LogEntry_Unlink
	//	*LogEntry_Setattr
	//	*LogEntry_Setxattr
	//	*LogEntry_Removexattr
	Data          isLogEntry_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_api_proto_persistence_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{17}
}

func (x *LogEntry) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *LogEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogEntry) GetType() LogEntryType {
	if x != nil {
		return x.Type
	}
	return LogEntryType_LOG_ENTRY_UNKNOWN
}

func (x *LogEntry) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *LogEntry) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *LogEntry) GetData() isLogEntry_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogEntry) GetCreateInode() *CreateInodeLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_CreateInode); ok {
			return x.CreateInode
		}
	}
	return nil
}

func (x *LogEntry) GetDeleteInode() *DeleteInodeLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_DeleteInode); ok {
			return x.DeleteInode
		}
	}
	return nil
}

func (x *LogEntry) GetUpdateInode() *UpdateInodeLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_UpdateInode); ok {
			return x.UpdateInode
		}
	}
	return nil
}

func (x *LogEntry) GetCreateChunk() *CreateChunkLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_CreateChunk); ok {
			return x.CreateChunk
		}
	}
	return nil
}

func (x *LogEntry) GetDeleteChunk() *DeleteChunkLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_DeleteChunk); ok {
			return x.DeleteChunk
		}
	}
	return nil
}

func (x *LogEntry) GetUpdateChunk() *UpdateChunkLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_UpdateChunk); ok {
			return x.UpdateChunk
		}
	}
	return nil
}

func (x *LogEntry) GetLeaseGrant() *LeaseGrantLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_LeaseGrant); ok {
			return x.LeaseGrant
		}
	}
	return nil
}

func (x *LogEntry) GetLeaseRevoke() *LeaseRevokeLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_LeaseRevoke); ok {
			return x.LeaseRevoke
		}
	}
	return nil
}

func (x *LogEntry) GetCheckpoint() *CheckpointLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Checkpoint); ok {
			return x.Checkpoint
		}
	}
	return nil
}

func (x *LogEntry) GetMkdir() *MkdirLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Mkdir); ok {
			return x.Mkdir
		}
	}
	return nil
}

func (x *LogEntry) GetRmdir() *RmdirLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Rmdir); ok {
			return x.Rmdir
		}
	}
	return nil
}

func (x *LogEntry) GetRename() *RenameLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Rename); ok {
			return x.Rename
		}
	}
	return nil
}

func (x *LogEntry) GetSymlink() *SymlinkLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Symlink); ok {
			return x.Symlink
		}
	}
	return nil
}

func (x *LogEntry) GetUnlink() *UnlinkLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Unlink); ok {
			return x.Unlink
		}
	}
	return nil
}

func (x *LogEntry) GetSetattr() *SetattrLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Setattr); ok {
			return x.Setattr
		}
	}
	return nil
}

func (x *LogEntry) GetSetxattr() *SetxattrLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Setxattr); ok {
			return x.Setxattr
		}
	}
	return nil
}

func (x *LogEntry) GetRemovexattr() *RemovexattrLogEntry {
	if x != nil {
		if x, ok := x.Data.(*LogEntry_Removexattr); ok {
			return x.Removexattr
		}
	}
	return nil
}

type isLogEntry_Data interface {
	isLogEntry_Data()
}

type LogEntry_CreateInode struct {
	CreateInode *CreateInodeLogEntry `protobuf:"bytes,10,opt,name=create_inode,json=createInode,proto3,oneof"`
}

type LogEntry_DeleteInode struct {
	DeleteInode *DeleteInodeLogEntry `protobuf:"bytes,11,opt,name=delete_inode,json=deleteInode,proto3,oneof"`
}

type LogEntry_UpdateInode struct {
	UpdateInode *UpdateInodeLogEntry `protobuf:"bytes,12,opt,name=update_inode,json=updateInode,proto3,oneof"`
}

type LogEntry_CreateChunk struct {
	CreateChunk *CreateChunkLogEntry `protobuf:"bytes,13,opt,name=create_chunk,json=createChunk,proto3,oneof"`
}

type LogEntry_DeleteChunk struct {
	DeleteChunk *DeleteChunkLogEntry `protobuf:"bytes,14,opt,name=delete_chunk,json=deleteChunk,proto3,oneof"`
}

type LogEntry_UpdateChunk struct {
	UpdateChunk *UpdateChunkLogEntry `protobuf:"bytes,15,opt,name=update_chunk,json=updateChunk,proto3,oneof"`
}

type LogEntry_LeaseGrant struct {
	LeaseGrant *LeaseGrantLogEntry `protobuf:"bytes,16,opt,name=lease_grant,json=leaseGrant,proto3,oneof"`
}

type LogEntry_LeaseRevoke struct {
	LeaseRevoke *LeaseRevokeLogEntry `protobuf:"bytes,17,opt,name=lease_revoke,json=leaseRevoke,proto3,oneof"`
}

type LogEntry_Checkpoint struct {
	Checkpoint *CheckpointLogEntry `protobuf:"bytes,18,opt,name=checkpoint,proto3,oneof"`
}

type LogEntry_Mkdir struct {
	Mkdir *MkdirLogEntry `protobuf:"bytes,19,opt,name=mkdir,proto3,oneof"`
}

type LogEntry_Rmdir struct {
	Rmdir *RmdirLogEntry `protobuf:"bytes,20,opt,name=rmdir,proto3,oneof"`
}

type LogEntry_Rename struct {
	Rename *RenameLogEntry `protobuf:"bytes,21,opt,name=rename,proto3,oneof"`
}

type LogEntry_Symlink struct {
	Symlink *SymlinkLogEntry `protobuf:"bytes,22,opt,name=symlink,proto3,oneof"`
}

type LogEntry_Unlink struct {
	Unlink *UnlinkLogEntry `protobuf:"bytes,23,opt,name=unlink,proto3,oneof"`
}

type LogEntry_Setattr struct {
	Setattr *SetattrLogEntry `protobuf:"bytes,24,opt,name=setattr,proto3,oneof"`
}

type LogEntry_Setxattr struct {
	Setxattr *SetxattrLogEntry `protobuf:"bytes,25,opt,name=setxattr,proto3,oneof"`
}

type LogEntry_Removexattr struct {
	Removexattr *RemovexattrLogEntry `protobuf:"bytes,26,opt,name=removexattr,proto3,oneof"`
}

func (*LogEntry_CreateInode) isLogEntry_Data() {}

func (*LogEntry_DeleteInode) isLogEntry_Data() {}

func (*LogEntry_UpdateInode) isLogEntry_Data() {}

func (*LogEntry_CreateChunk) isLogEntry_Data() {}

func (*LogEntry_DeleteChunk) isLogEntry_Data() {}

func (*LogEntry_UpdateChunk) isLogEntry_Data() {}

func (*LogEntry_LeaseGrant) isLogEntry_Data() {}

func (*LogEntry_LeaseRevoke) isLogEntry_Data() {}

func (*LogEntry_Checkpoint) isLogEntry_Data() {}

func (*LogEntry_Mkdir) isLogEntry_Data() {}

func (*LogEntry_Rmdir) isLogEntry_Data() {}

func (*LogEntry_Rename) isLogEntry_Data() {}

func (*LogEntry_Symlink) isLogEntry_Data() {}

func (*LogEntry_Unlink) isLogEntry_Data() {}

func (*LogEntry_Setattr) isLogEntry_Data() {}

func (*LogEntry_Setxattr) isLogEntry_Data() {}

func (*LogEntry_Removexattr) isLogEntry_Data() {}

// Log file header for binary log files
type LogFileHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Magic         uint32                 `protobuf:"varint,1,opt,name=magic,proto3" json:"magic,omitempty"`                                      // Magic number for file identification
	Version       uint32                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                  // Log format version
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             // Creation timestamp
	NodeId        string                 `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                       // Node that created this log
	StartSequence uint64                 `protobuf:"varint,5,opt,name=start_sequence,json=startSequence,proto3" json:"start_sequence,omitempty"` // First sequence number in this file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogFileHeader) Reset() {
	*x = LogFileHeader{}
	mi := &file_api_proto_persistence_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogFileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFileHeader) ProtoMessage() {}

func (x *LogFileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFileHeader.ProtoReflect.Descriptor instead.
func (*LogFileHeader) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{18}
}

func (x *LogFileHeader) GetMagic() uint32 {
	if x != nil {
		return x.Magic
	}
	return 0
}

func (x *LogFileHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LogFileHeader) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LogFileHeader) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *LogFileHeader) GetStartSequence() uint64 {
	if x != nil {
		return x.StartSequence
	}
	return 0
}

// Checkpoint metadata
type CheckpointMetadata struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SequenceNumber uint64                 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	LogFilePath    string                 `protobuf:"bytes,3,opt,name=log_file_path,json=logFilePath,proto3" json:"log_file_path,omitempty"`
	LogFileOffset  uint64                 `protobuf:"varint,4,opt,name=log_file_offset,json=logFileOffset,proto3" json:"log_file_offset,omitempty"`
	Checksum       string                 `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Metadata       map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CheckpointMetadata) Reset() {
	*x = CheckpointMetadata{}
	mi := &file_api_proto_persistence_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointMetadata) ProtoMessage() {}

func (x *CheckpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_persistence_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointMetadata.ProtoReflect.Descriptor instead.
func (*CheckpointMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_persistence_proto_rawDescGZIP(), []int{19}
}

func (x *CheckpointMetadata) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CheckpointMetadata) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CheckpointMetadata) GetLogFilePath() string {
	if x != nil {
		return x.LogFilePath
	}
	return ""
}

func (x *CheckpointMetadata) GetLogFileOffset() uint64 {
	if x != nil {
		return x.LogFileOffset
	}
	return 0
}

func (x *CheckpointMetadata) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *CheckpointMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_api_proto_persistence_proto protoreflect.FileDescriptor

var file_api_proto_persistence_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64,
	0x66, 0x73, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x61,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x66, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x74, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x79, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x52, 0x6d, 0x64,
	0x69, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x5c, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x80, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x6d, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x78, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x44, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x78, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x08, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66,
	0x73, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x6d, 0x64, 0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73,
	0x2e, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x6d, 0x64, 0x69, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x53, 0x79,
	0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x61, 0x74, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x78, 0x61, 0x74, 0x74, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x66,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x78, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x3c,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x78, 0x61, 0x74, 0x74, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x78, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x78, 0x61, 0x74, 0x74, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x66, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xd5, 0x03, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e,
	0x4b, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x4b, 0x44, 0x49, 0x52, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x52,
	0x4d, 0x44, 0x49, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x41, 0x54, 0x54, 0x52, 0x10, 0x0f,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x54, 0x58, 0x41, 0x54, 0x54, 0x52, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x58, 0x41, 0x54, 0x54,
	0x52, 0x10, 0x11, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x75, 0x74, 0x74, 0x61, 0x6d, 0x2d, 0x6c, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_proto_persistence_proto_rawDescOnce sync.Once
	file_api_proto_persistence_proto_rawDescData []byte
)

func file_api_proto_persistence_proto_rawDescGZIP() []byte {
	file_api_proto_persistence_proto_rawDescOnce.Do(func() {
		file_api_proto_persistence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_persistence_proto_rawDesc), len(file_api_proto_persistence_proto_rawDesc)))
	})
	return file_api_proto_persistence_proto_rawDescData
}

var file_api_proto_persistence_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_persistence_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_proto_persistence_proto_goTypes = []any{
	(LogEntryType)(0),             // 0: dfs.LogEntryType
	(*CreateInodeLogEntry)(nil),   // 1: dfs.CreateInodeLogEntry
	(*DeleteInodeLogEntry)(nil),   // 2: dfs.DeleteInodeLogEntry
	(*UpdateInodeLogEntry)(nil),   // 3: dfs.UpdateInodeLogEntry
	(*CreateChunkLogEntry)(nil),   // 4: dfs.CreateChunkLogEntry
	(*DeleteChunkLogEntry)(nil),   // 5: dfs.DeleteChunkLogEntry
	(*UpdateChunkLogEntry)(nil),   // 6: dfs.UpdateChunkLogEntry
	(*LeaseGrantLogEntry)(nil),    // 7: dfs.LeaseGrantLogEntry
	(*LeaseRevokeLogEntry)(nil),   // 8: dfs.LeaseRevokeLogEntry
	(*CheckpointLogEntry)(nil),    // 9: dfs.CheckpointLogEntry
	(*MkdirLogEntry)(nil),         // 10: dfs.MkdirLogEntry
	(*RmdirLogEntry)(nil),         // 11: dfs.RmdirLogEntry
	(*RenameLogEntry)(nil),        // 12: dfs.RenameLogEntry
	(*SymlinkLogEntry)(nil),       // 13: dfs.SymlinkLogEntry
	(*UnlinkLogEntry)(nil),        // 14: dfs.UnlinkLogEntry
	(*SetattrLogEntry)(nil),       // 15: dfs.SetattrLogEntry
	(*SetxattrLogEntry)(nil),      // 16: dfs.SetxattrLogEntry
	(*RemovexattrLogEntry)(nil),   // 17: dfs.RemovexattrLogEntry
	(*LogEntry)(nil),              // 18: dfs.LogEntry
	(*LogFileHeader)(nil),         // 19: dfs.LogFileHeader
	(*CheckpointMetadata)(nil),    // 20: dfs.CheckpointMetadata
	nil,                           // 21: dfs.CheckpointMetadata.MetadataEntry
	(*common.FileAttributes)(nil), // 22: dfs.FileAttributes
	(*common.ChunkLocation)(nil),  // 23: dfs.ChunkLocation
}
var file_api_proto_persistence_proto_depIdxs = []int32{
	22, // 0: dfs.CreateInodeLogEntry.attributes:type_name -> dfs.FileAttributes
	22, // 1: dfs.UpdateInodeLogEntry.attributes:type_name -> dfs.FileAttributes
	23, // 2: dfs.CreateChunkLogEntry.locations:type_name -> dfs.ChunkLocation
	23, // 3: dfs.UpdateChunkLogEntry.locations:type_name -> dfs.ChunkLocation
	22, // 4: dfs.MkdirLogEntry.attributes:type_name -> dfs.FileAttributes
	22, // 5: dfs.SymlinkLogEntry.attributes:type_name -> dfs.FileAttributes
	22, // 6: dfs.SetattrLogEntry.attributes:type_name -> dfs.FileAttributes
	0,  // 7: dfs.LogEntry.type:type_name -> dfs.LogEntryType
	1,  // 8: dfs.LogEntry.create_inode:type_name -> dfs.CreateInodeLogEntry
	2,  // 9: dfs.LogEntry.delete_inode:type_name -> dfs.DeleteInodeLogEntry
	3,  // 10: dfs.LogEntry.update_inode:type_name -> dfs.UpdateInodeLogEntry
	4,  // 11: dfs.LogEntry.create_chunk:type_name -> dfs.CreateChunkLogEntry
	5,  // 12: dfs.LogEntry.delete_chunk:type_name -> dfs.DeleteChunkLogEntry
	6,  // 13: dfs.LogEntry.update_chunk:type_name -> dfs.UpdateChunkLogEntry
	7,  // 14: dfs.LogEntry.lease_grant:type_name -> dfs.LeaseGrantLogEntry
	8,  // 15: dfs.LogEntry.lease_revoke:type_name -> dfs.LeaseRevokeLogEntry
	9,  // 16: dfs.LogEntry.checkpoint:type_name -> dfs.CheckpointLogEntry
	10, // 17: dfs.LogEntry.mkdir:type_name -> dfs.MkdirLogEntry
	11, // 18: dfs.LogEntry.rmdir:type_name -> dfs.RmdirLogEntry
	12, // 19: dfs.LogEntry.rename:type_name -> dfs.RenameLogEntry
	13, // 20: dfs.LogEntry.symlink:type_name -> dfs.SymlinkLogEntry
	14, // 21: dfs.LogEntry.unlink:type_name -> dfs.UnlinkLogEntry
	15, // 22: dfs.LogEntry.setattr:type_name -> dfs.SetattrLogEntry
	16, // 23: dfs.LogEntry.setxattr:type_name -> dfs.SetxattrLogEntry
	17, // 24: dfs.LogEntry.removexattr:type_name -> dfs.RemovexattrLogEntry
	21, // 25: dfs.CheckpointMetadata.metadata:type_name -> dfs.CheckpointMetadata.MetadataEntry
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_proto_persistence_proto_init() }
func file_api_proto_persistence_proto_init() {
	if File_api_proto_persistence_proto != nil {
		return
	}
	file_api_proto_persistence_proto_msgTypes[17].OneofWrappers = []any{
		(*LogEntry_CreateInode)(nil),
		(*LogEntry_DeleteInode)(nil),
		(*LogEntry_UpdateInode)(nil),
		(*LogEntry_CreateChunk)(nil),
		(*LogEntry_DeleteChunk)(nil),
		(*LogEntry_UpdateChunk)(nil),
		(*LogEntry_LeaseGrant)(nil),
		(*LogEntry_LeaseRevoke)(nil),
		(*LogEntry_Checkpoint)(nil),
		(*LogEntry_Mkdir)(nil),
		(*LogEntry_Rmdir)(nil),
		(*LogEntry_Rename)(nil),
		(*LogEntry_Symlink)(nil),
		(*LogEntry_Unlink)(nil),
		(*LogEntry_Setattr)(nil),
		(*LogEntry_Setxattr)(nil),
		(*LogEntry_Removexattr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_persistence_proto_rawDesc), len(file_api_proto_persistence_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_persistence_proto_goTypes,
		DependencyIndexes: file_api_proto_persistence_proto_depIdxs,
		EnumInfos:         file_api_proto_persistence_proto_enumTypes,
		MessageInfos:      file_api_proto_persistence_proto_msgTypes,
	}.Build()
	File_api_proto_persistence_proto = out.File
	file_api_proto_persistence_proto_goTypes = nil
	file_api_proto_persistence_proto_depIdxs = nil
}
