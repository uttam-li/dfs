// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: api/proto/chunkserver.proto

package chunkserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadChunkRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle      string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	Offset           uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length           uint32                 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Version          uint32                 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ExpectedChecksum []byte                 `protobuf:"bytes,5,opt,name=expected_checksum,json=expectedChecksum,proto3" json:"expected_checksum,omitempty"` // For verification
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReadChunkRequest) Reset() {
	*x = ReadChunkRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkRequest) ProtoMessage() {}

func (x *ReadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkRequest.ProtoReflect.Descriptor instead.
func (*ReadChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{0}
}

func (x *ReadChunkRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ReadChunkRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadChunkRequest) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ReadChunkRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReadChunkRequest) GetExpectedChecksum() []byte {
	if x != nil {
		return x.ExpectedChecksum
	}
	return nil
}

type ReadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	IsFinalChunk  bool                   `protobuf:"varint,3,opt,name=is_final_chunk,json=isFinalChunk,proto3" json:"is_final_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadChunkResponse) Reset() {
	*x = ReadChunkResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkResponse) ProtoMessage() {}

func (x *ReadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkResponse.ProtoReflect.Descriptor instead.
func (*ReadChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReadChunkResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadChunkResponse) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ReadChunkResponse) GetIsFinalChunk() bool {
	if x != nil {
		return x.IsFinalChunk
	}
	return false
}

type CreateChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	Version       uint32                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	InitialSize   uint64                 `protobuf:"varint,3,opt,name=initial_size,json=initialSize,proto3" json:"initial_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChunkRequest) Reset() {
	*x = CreateChunkRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkRequest) ProtoMessage() {}

func (x *CreateChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkRequest.ProtoReflect.Descriptor instead.
func (*CreateChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{2}
}

func (x *CreateChunkRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *CreateChunkRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateChunkRequest) GetInitialSize() uint64 {
	if x != nil {
		return x.InitialSize
	}
	return 0
}

type CreateChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllocatedSize uint64                 `protobuf:"varint,1,opt,name=allocated_size,json=allocatedSize,proto3" json:"allocated_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChunkResponse) Reset() {
	*x = CreateChunkResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkResponse) ProtoMessage() {}

func (x *CreateChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkResponse.ProtoReflect.Descriptor instead.
func (*CreateChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChunkResponse) GetAllocatedSize() uint64 {
	if x != nil {
		return x.AllocatedSize
	}
	return 0
}

type DeleteChunksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandles  []string               `protobuf:"bytes,1,rep,name=chunk_handles,json=chunkHandles,proto3" json:"chunk_handles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunksRequest) Reset() {
	*x = DeleteChunksRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunksRequest) ProtoMessage() {}

func (x *DeleteChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunksRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunksRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteChunksRequest) GetChunkHandles() []string {
	if x != nil {
		return x.ChunkHandles
	}
	return nil
}

type DeleteChunksResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Results       []*DeleteChunksResponse_DeleteResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunksResponse) Reset() {
	*x = DeleteChunksResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunksResponse) ProtoMessage() {}

func (x *DeleteChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunksResponse.ProtoReflect.Descriptor instead.
func (*DeleteChunksResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteChunksResponse) GetResults() []*DeleteChunksResponse_DeleteResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetChunkInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkInfoRequest) Reset() {
	*x = GetChunkInfoRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkInfoRequest) ProtoMessage() {}

func (x *GetChunkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkInfoRequest.ProtoReflect.Descriptor instead.
func (*GetChunkInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{6}
}

func (x *GetChunkInfoRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

type GetChunkInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Version       uint32                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	CreatedTime   int64                  `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastModified  int64                  `protobuf:"varint,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkInfoResponse) Reset() {
	*x = GetChunkInfoResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkInfoResponse) ProtoMessage() {}

func (x *GetChunkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkInfoResponse.ProtoReflect.Descriptor instead.
func (*GetChunkInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{7}
}

func (x *GetChunkInfoResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetChunkInfoResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetChunkInfoResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetChunkInfoResponse) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *GetChunkInfoResponse) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *GetChunkInfoResponse) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type ReplicateChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	SourceServer  string                 `protobuf:"bytes,2,opt,name=source_server,json=sourceServer,proto3" json:"source_server,omitempty"`
	TargetVersion uint32                 `protobuf:"varint,3,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicateChunkRequest) Reset() {
	*x = ReplicateChunkRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateChunkRequest) ProtoMessage() {}

func (x *ReplicateChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateChunkRequest.ProtoReflect.Descriptor instead.
func (*ReplicateChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicateChunkRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ReplicateChunkRequest) GetSourceServer() string {
	if x != nil {
		return x.SourceServer
	}
	return ""
}

func (x *ReplicateChunkRequest) GetTargetVersion() uint32 {
	if x != nil {
		return x.TargetVersion
	}
	return 0
}

type ReplicateChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkSize     uint64                 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicateChunkResponse) Reset() {
	*x = ReplicateChunkResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateChunkResponse) ProtoMessage() {}

func (x *ReplicateChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateChunkResponse.ProtoReflect.Descriptor instead.
func (*ReplicateChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicateChunkResponse) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ReplicateChunkResponse) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type ServerHealth struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CpuUsage          float64                `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage       float64                `protobuf:"fixed64,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	DiskUsage         float64                `protobuf:"fixed64,3,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	ActiveConnections uint32                 `protobuf:"varint,4,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	UptimeSeconds     int64                  `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ServerHealth) Reset() {
	*x = ServerHealth{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHealth) ProtoMessage() {}

func (x *ServerHealth) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHealth.ProtoReflect.Descriptor instead.
func (*ServerHealth) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{10}
}

func (x *ServerHealth) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ServerHealth) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ServerHealth) GetDiskUsage() float64 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

func (x *ServerHealth) GetActiveConnections() uint32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *ServerHealth) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

// Chunk health check operation
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{11}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthy     bool                   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	Issues        []string               `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"` // List of any health issues
	Health        *ServerHealth          `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{12}
}

func (x *HealthCheckResponse) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *HealthCheckResponse) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *HealthCheckResponse) GetHealth() *ServerHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

// Two-Phase Write Protocol Messages
type BufferDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WriteId       string                 `protobuf:"bytes,1,opt,name=write_id,json=writeId,proto3" json:"write_id,omitempty"`
	ChunkHandle   string                 `protobuf:"bytes,2,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Version       uint32                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BufferDataRequest) Reset() {
	*x = BufferDataRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BufferDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferDataRequest) ProtoMessage() {}

func (x *BufferDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferDataRequest.ProtoReflect.Descriptor instead.
func (*BufferDataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{13}
}

func (x *BufferDataRequest) GetWriteId() string {
	if x != nil {
		return x.WriteId
	}
	return ""
}

func (x *BufferDataRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *BufferDataRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BufferDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BufferDataRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type BufferDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BufferDataResponse) Reset() {
	*x = BufferDataResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BufferDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferDataResponse) ProtoMessage() {}

func (x *BufferDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferDataResponse.ProtoReflect.Descriptor instead.
func (*BufferDataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{14}
}

func (x *BufferDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BufferDataResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SerializeWritesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle    string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	WriteIds       []string               `protobuf:"bytes,2,rep,name=write_ids,json=writeIds,proto3" json:"write_ids,omitempty"`
	ReplicaServers []string               `protobuf:"bytes,3,rep,name=replica_servers,json=replicaServers,proto3" json:"replica_servers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SerializeWritesRequest) Reset() {
	*x = SerializeWritesRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeWritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeWritesRequest) ProtoMessage() {}

func (x *SerializeWritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeWritesRequest.ProtoReflect.Descriptor instead.
func (*SerializeWritesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{15}
}

func (x *SerializeWritesRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *SerializeWritesRequest) GetWriteIds() []string {
	if x != nil {
		return x.WriteIds
	}
	return nil
}

func (x *SerializeWritesRequest) GetReplicaServers() []string {
	if x != nil {
		return x.ReplicaServers
	}
	return nil
}

type SerializeWritesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	WritesApplied uint32                 `protobuf:"varint,3,opt,name=writes_applied,json=writesApplied,proto3" json:"writes_applied,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializeWritesResponse) Reset() {
	*x = SerializeWritesResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeWritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeWritesResponse) ProtoMessage() {}

func (x *SerializeWritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeWritesResponse.ProtoReflect.Descriptor instead.
func (*SerializeWritesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{16}
}

func (x *SerializeWritesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SerializeWritesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SerializeWritesResponse) GetWritesApplied() uint32 {
	if x != nil {
		return x.WritesApplied
	}
	return 0
}

type ApplyWritesRequest struct {
	state           protoimpl.MessageState               `protogen:"open.v1"`
	ChunkHandle     string                               `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	WriteOperations []*ApplyWritesRequest_WriteOperation `protobuf:"bytes,2,rep,name=write_operations,json=writeOperations,proto3" json:"write_operations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ApplyWritesRequest) Reset() {
	*x = ApplyWritesRequest{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyWritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWritesRequest) ProtoMessage() {}

func (x *ApplyWritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWritesRequest.ProtoReflect.Descriptor instead.
func (*ApplyWritesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{17}
}

func (x *ApplyWritesRequest) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ApplyWritesRequest) GetWriteOperations() []*ApplyWritesRequest_WriteOperation {
	if x != nil {
		return x.WriteOperations
	}
	return nil
}

type ApplyWritesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	NewChunkSize  uint64                 `protobuf:"varint,3,opt,name=new_chunk_size,json=newChunkSize,proto3" json:"new_chunk_size,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyWritesResponse) Reset() {
	*x = ApplyWritesResponse{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyWritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWritesResponse) ProtoMessage() {}

func (x *ApplyWritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWritesResponse.ProtoReflect.Descriptor instead.
func (*ApplyWritesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{18}
}

func (x *ApplyWritesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ApplyWritesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ApplyWritesResponse) GetNewChunkSize() uint64 {
	if x != nil {
		return x.NewChunkSize
	}
	return 0
}

func (x *ApplyWritesResponse) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type DeleteChunksResponse_DeleteResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHandle   string                 `protobuf:"bytes,1,opt,name=chunk_handle,json=chunkHandle,proto3" json:"chunk_handle,omitempty"`
	FreedSpace    uint64                 `protobuf:"varint,2,opt,name=freed_space,json=freedSpace,proto3" json:"freed_space,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunksResponse_DeleteResult) Reset() {
	*x = DeleteChunksResponse_DeleteResult{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunksResponse_DeleteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunksResponse_DeleteResult) ProtoMessage() {}

func (x *DeleteChunksResponse_DeleteResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunksResponse_DeleteResult.ProtoReflect.Descriptor instead.
func (*DeleteChunksResponse_DeleteResult) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DeleteChunksResponse_DeleteResult) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *DeleteChunksResponse_DeleteResult) GetFreedSpace() uint64 {
	if x != nil {
		return x.FreedSpace
	}
	return 0
}

type ApplyWritesRequest_WriteOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        uint64                 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyWritesRequest_WriteOperation) Reset() {
	*x = ApplyWritesRequest_WriteOperation{}
	mi := &file_api_proto_chunkserver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyWritesRequest_WriteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWritesRequest_WriteOperation) ProtoMessage() {}

func (x *ApplyWritesRequest_WriteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunkserver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWritesRequest_WriteOperation.ProtoReflect.Descriptor instead.
func (*ApplyWritesRequest_WriteOperation) Descriptor() ([]byte, []int) {
	return file_api_proto_chunkserver_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ApplyWritesRequest_WriteOperation) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ApplyWritesRequest_WriteOperation) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_proto_chunkserver_proto protoreflect.FileDescriptor

var file_api_proto_chunkserver_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64,
	0x66, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x69, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x74, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x3a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x66, 0x72, 0x65, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x77, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x11,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x12, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x7f,
	0x0a, 0x17, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22,
	0xc8, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x32, 0xf8, 0x04, 0x0a, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e,
	0x64, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x17,
	0x2e, 0x64, 0x66, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x64, 0x66,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x74, 0x74,
	0x61, 0x6d, 0x2d, 0x6c, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_proto_chunkserver_proto_rawDescOnce sync.Once
	file_api_proto_chunkserver_proto_rawDescData []byte
)

func file_api_proto_chunkserver_proto_rawDescGZIP() []byte {
	file_api_proto_chunkserver_proto_rawDescOnce.Do(func() {
		file_api_proto_chunkserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_chunkserver_proto_rawDesc), len(file_api_proto_chunkserver_proto_rawDesc)))
	})
	return file_api_proto_chunkserver_proto_rawDescData
}

var file_api_proto_chunkserver_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_proto_chunkserver_proto_goTypes = []any{
	(*ReadChunkRequest)(nil),                  // 0: dfs.ReadChunkRequest
	(*ReadChunkResponse)(nil),                 // 1: dfs.ReadChunkResponse
	(*CreateChunkRequest)(nil),                // 2: dfs.CreateChunkRequest
	(*CreateChunkResponse)(nil),               // 3: dfs.CreateChunkResponse
	(*DeleteChunksRequest)(nil),               // 4: dfs.DeleteChunksRequest
	(*DeleteChunksResponse)(nil),              // 5: dfs.DeleteChunksResponse
	(*GetChunkInfoRequest)(nil),               // 6: dfs.GetChunkInfoRequest
	(*GetChunkInfoResponse)(nil),              // 7: dfs.GetChunkInfoResponse
	(*ReplicateChunkRequest)(nil),             // 8: dfs.ReplicateChunkRequest
	(*ReplicateChunkResponse)(nil),            // 9: dfs.ReplicateChunkResponse
	(*ServerHealth)(nil),                      // 10: dfs.ServerHealth
	(*HealthCheckRequest)(nil),                // 11: dfs.HealthCheckRequest
	(*HealthCheckResponse)(nil),               // 12: dfs.HealthCheckResponse
	(*BufferDataRequest)(nil),                 // 13: dfs.BufferDataRequest
	(*BufferDataResponse)(nil),                // 14: dfs.BufferDataResponse
	(*SerializeWritesRequest)(nil),            // 15: dfs.SerializeWritesRequest
	(*SerializeWritesResponse)(nil),           // 16: dfs.SerializeWritesResponse
	(*ApplyWritesRequest)(nil),                // 17: dfs.ApplyWritesRequest
	(*ApplyWritesResponse)(nil),               // 18: dfs.ApplyWritesResponse
	(*DeleteChunksResponse_DeleteResult)(nil), // 19: dfs.DeleteChunksResponse.DeleteResult
	(*ApplyWritesRequest_WriteOperation)(nil), // 20: dfs.ApplyWritesRequest.WriteOperation
}
var file_api_proto_chunkserver_proto_depIdxs = []int32{
	19, // 0: dfs.DeleteChunksResponse.results:type_name -> dfs.DeleteChunksResponse.DeleteResult
	10, // 1: dfs.HealthCheckResponse.health:type_name -> dfs.ServerHealth
	20, // 2: dfs.ApplyWritesRequest.write_operations:type_name -> dfs.ApplyWritesRequest.WriteOperation
	0,  // 3: dfs.ChunkServerService.ReadChunk:input_type -> dfs.ReadChunkRequest
	2,  // 4: dfs.ChunkServerService.CreateChunk:input_type -> dfs.CreateChunkRequest
	4,  // 5: dfs.ChunkServerService.DeleteChunks:input_type -> dfs.DeleteChunksRequest
	6,  // 6: dfs.ChunkServerService.GetChunkInfo:input_type -> dfs.GetChunkInfoRequest
	13, // 7: dfs.ChunkServerService.BufferData:input_type -> dfs.BufferDataRequest
	15, // 8: dfs.ChunkServerService.SerializeWrites:input_type -> dfs.SerializeWritesRequest
	17, // 9: dfs.ChunkServerService.ApplyWrites:input_type -> dfs.ApplyWritesRequest
	8,  // 10: dfs.ChunkServerService.ReplicateChunk:input_type -> dfs.ReplicateChunkRequest
	11, // 11: dfs.ChunkServerService.HealthCheck:input_type -> dfs.HealthCheckRequest
	1,  // 12: dfs.ChunkServerService.ReadChunk:output_type -> dfs.ReadChunkResponse
	3,  // 13: dfs.ChunkServerService.CreateChunk:output_type -> dfs.CreateChunkResponse
	5,  // 14: dfs.ChunkServerService.DeleteChunks:output_type -> dfs.DeleteChunksResponse
	7,  // 15: dfs.ChunkServerService.GetChunkInfo:output_type -> dfs.GetChunkInfoResponse
	14, // 16: dfs.ChunkServerService.BufferData:output_type -> dfs.BufferDataResponse
	16, // 17: dfs.ChunkServerService.SerializeWrites:output_type -> dfs.SerializeWritesResponse
	18, // 18: dfs.ChunkServerService.ApplyWrites:output_type -> dfs.ApplyWritesResponse
	9,  // 19: dfs.ChunkServerService.ReplicateChunk:output_type -> dfs.ReplicateChunkResponse
	12, // 20: dfs.ChunkServerService.HealthCheck:output_type -> dfs.HealthCheckResponse
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_proto_chunkserver_proto_init() }
func file_api_proto_chunkserver_proto_init() {
	if File_api_proto_chunkserver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_chunkserver_proto_rawDesc), len(file_api_proto_chunkserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_chunkserver_proto_goTypes,
		DependencyIndexes: file_api_proto_chunkserver_proto_depIdxs,
		MessageInfos:      file_api_proto_chunkserver_proto_msgTypes,
	}.Build()
	File_api_proto_chunkserver_proto = out.File
	file_api_proto_chunkserver_proto_goTypes = nil
	file_api_proto_chunkserver_proto_depIdxs = nil
}
