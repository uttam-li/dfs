// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api/proto/chunkserver.proto

package chunkserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkServerService_ReadChunk_FullMethodName       = "/dfs.ChunkServerService/ReadChunk"
	ChunkServerService_CreateChunk_FullMethodName     = "/dfs.ChunkServerService/CreateChunk"
	ChunkServerService_DeleteChunks_FullMethodName    = "/dfs.ChunkServerService/DeleteChunks"
	ChunkServerService_GetChunkInfo_FullMethodName    = "/dfs.ChunkServerService/GetChunkInfo"
	ChunkServerService_BufferData_FullMethodName      = "/dfs.ChunkServerService/BufferData"
	ChunkServerService_SerializeWrites_FullMethodName = "/dfs.ChunkServerService/SerializeWrites"
	ChunkServerService_ApplyWrites_FullMethodName     = "/dfs.ChunkServerService/ApplyWrites"
	ChunkServerService_ReplicateChunk_FullMethodName  = "/dfs.ChunkServerService/ReplicateChunk"
	ChunkServerService_HealthCheck_FullMethodName     = "/dfs.ChunkServerService/HealthCheck"
)

// ChunkServerServiceClient is the client API for ChunkServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkServerServiceClient interface {
	// Data Operations
	ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkResponse, error)
	CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error)
	DeleteChunks(ctx context.Context, in *DeleteChunksRequest, opts ...grpc.CallOption) (*DeleteChunksResponse, error)
	GetChunkInfo(ctx context.Context, in *GetChunkInfoRequest, opts ...grpc.CallOption) (*GetChunkInfoResponse, error)
	// Two-Phase Write Protocol
	BufferData(ctx context.Context, in *BufferDataRequest, opts ...grpc.CallOption) (*BufferDataResponse, error)
	SerializeWrites(ctx context.Context, in *SerializeWritesRequest, opts ...grpc.CallOption) (*SerializeWritesResponse, error)
	ApplyWrites(ctx context.Context, in *ApplyWritesRequest, opts ...grpc.CallOption) (*ApplyWritesResponse, error)
	// Replication Operations
	ReplicateChunk(ctx context.Context, in *ReplicateChunkRequest, opts ...grpc.CallOption) (*ReplicateChunkResponse, error)
	// Health and Maintenance Operations
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type chunkServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServerServiceClient(cc grpc.ClientConnInterface) ChunkServerServiceClient {
	return &chunkServerServiceClient{cc}
}

func (c *chunkServerServiceClient) ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadChunkResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_ReadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChunkResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_CreateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) DeleteChunks(ctx context.Context, in *DeleteChunksRequest, opts ...grpc.CallOption) (*DeleteChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChunksResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_DeleteChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) GetChunkInfo(ctx context.Context, in *GetChunkInfoRequest, opts ...grpc.CallOption) (*GetChunkInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkInfoResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_GetChunkInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) BufferData(ctx context.Context, in *BufferDataRequest, opts ...grpc.CallOption) (*BufferDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BufferDataResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_BufferData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) SerializeWrites(ctx context.Context, in *SerializeWritesRequest, opts ...grpc.CallOption) (*SerializeWritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SerializeWritesResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_SerializeWrites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) ApplyWrites(ctx context.Context, in *ApplyWritesRequest, opts ...grpc.CallOption) (*ApplyWritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyWritesResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_ApplyWrites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) ReplicateChunk(ctx context.Context, in *ReplicateChunkRequest, opts ...grpc.CallOption) (*ReplicateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateChunkResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_ReplicateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ChunkServerService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServerServiceServer is the server API for ChunkServerService service.
// All implementations must embed UnimplementedChunkServerServiceServer
// for forward compatibility.
type ChunkServerServiceServer interface {
	// Data Operations
	ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkResponse, error)
	CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error)
	DeleteChunks(context.Context, *DeleteChunksRequest) (*DeleteChunksResponse, error)
	GetChunkInfo(context.Context, *GetChunkInfoRequest) (*GetChunkInfoResponse, error)
	// Two-Phase Write Protocol
	BufferData(context.Context, *BufferDataRequest) (*BufferDataResponse, error)
	SerializeWrites(context.Context, *SerializeWritesRequest) (*SerializeWritesResponse, error)
	ApplyWrites(context.Context, *ApplyWritesRequest) (*ApplyWritesResponse, error)
	// Replication Operations
	ReplicateChunk(context.Context, *ReplicateChunkRequest) (*ReplicateChunkResponse, error)
	// Health and Maintenance Operations
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedChunkServerServiceServer()
}

// UnimplementedChunkServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkServerServiceServer struct{}

func (UnimplementedChunkServerServiceServer) ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunk not implemented")
}
func (UnimplementedChunkServerServiceServer) CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunk not implemented")
}
func (UnimplementedChunkServerServiceServer) DeleteChunks(context.Context, *DeleteChunksRequest) (*DeleteChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunks not implemented")
}
func (UnimplementedChunkServerServiceServer) GetChunkInfo(context.Context, *GetChunkInfoRequest) (*GetChunkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkInfo not implemented")
}
func (UnimplementedChunkServerServiceServer) BufferData(context.Context, *BufferDataRequest) (*BufferDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BufferData not implemented")
}
func (UnimplementedChunkServerServiceServer) SerializeWrites(context.Context, *SerializeWritesRequest) (*SerializeWritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SerializeWrites not implemented")
}
func (UnimplementedChunkServerServiceServer) ApplyWrites(context.Context, *ApplyWritesRequest) (*ApplyWritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyWrites not implemented")
}
func (UnimplementedChunkServerServiceServer) ReplicateChunk(context.Context, *ReplicateChunkRequest) (*ReplicateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateChunk not implemented")
}
func (UnimplementedChunkServerServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedChunkServerServiceServer) mustEmbedUnimplementedChunkServerServiceServer() {}
func (UnimplementedChunkServerServiceServer) testEmbeddedByValue()                            {}

// UnsafeChunkServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServerServiceServer will
// result in compilation errors.
type UnsafeChunkServerServiceServer interface {
	mustEmbedUnimplementedChunkServerServiceServer()
}

func RegisterChunkServerServiceServer(s grpc.ServiceRegistrar, srv ChunkServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkServerService_ServiceDesc, srv)
}

func _ChunkServerService_ReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).ReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_ReadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).ReadChunk(ctx, req.(*ReadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_CreateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).CreateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_CreateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).CreateChunk(ctx, req.(*CreateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_DeleteChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).DeleteChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_DeleteChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).DeleteChunks(ctx, req.(*DeleteChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_GetChunkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).GetChunkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_GetChunkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).GetChunkInfo(ctx, req.(*GetChunkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_BufferData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).BufferData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_BufferData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).BufferData(ctx, req.(*BufferDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_SerializeWrites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerializeWritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).SerializeWrites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_SerializeWrites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).SerializeWrites(ctx, req.(*SerializeWritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_ApplyWrites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyWritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).ApplyWrites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_ApplyWrites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).ApplyWrites(ctx, req.(*ApplyWritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_ReplicateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).ReplicateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_ReplicateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).ReplicateChunk(ctx, req.(*ReplicateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkServerService_ServiceDesc is the grpc.ServiceDesc for ChunkServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.ChunkServerService",
	HandlerType: (*ChunkServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadChunk",
			Handler:    _ChunkServerService_ReadChunk_Handler,
		},
		{
			MethodName: "CreateChunk",
			Handler:    _ChunkServerService_CreateChunk_Handler,
		},
		{
			MethodName: "DeleteChunks",
			Handler:    _ChunkServerService_DeleteChunks_Handler,
		},
		{
			MethodName: "GetChunkInfo",
			Handler:    _ChunkServerService_GetChunkInfo_Handler,
		},
		{
			MethodName: "BufferData",
			Handler:    _ChunkServerService_BufferData_Handler,
		},
		{
			MethodName: "SerializeWrites",
			Handler:    _ChunkServerService_SerializeWrites_Handler,
		},
		{
			MethodName: "ApplyWrites",
			Handler:    _ChunkServerService_ApplyWrites_Handler,
		},
		{
			MethodName: "ReplicateChunk",
			Handler:    _ChunkServerService_ReplicateChunk_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ChunkServerService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/chunkserver.proto",
}
