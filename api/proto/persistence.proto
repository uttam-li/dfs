syntax = "proto3";

package dfs;
option go_package = "github.com/uttam-li/dfs/api/generated/persistence";

import "api/proto/common.proto";

// Log entry types for persistence
enum LogEntryType {
    LOG_ENTRY_UNKNOWN = 0;
    LOG_ENTRY_CREATE_INODE = 1;
    LOG_ENTRY_DELETE_INODE = 2;
    LOG_ENTRY_UPDATE_INODE = 3;
    LOG_ENTRY_CREATE_CHUNK = 4;
    LOG_ENTRY_DELETE_CHUNK = 5;
    LOG_ENTRY_UPDATE_CHUNK = 6;
    LOG_ENTRY_LEASE_GRANT = 7;
    LOG_ENTRY_LEASE_REVOKE = 8;
    LOG_ENTRY_CHECKPOINT = 9;
    LOG_ENTRY_MKDIR = 10;
    LOG_ENTRY_RMDIR = 11;
    LOG_ENTRY_RENAME = 12;
    LOG_ENTRY_SYMLINK = 13;
    LOG_ENTRY_UNLINK = 14;
    LOG_ENTRY_SETATTR = 15;
    LOG_ENTRY_SETXATTR = 16;
    LOG_ENTRY_REMOVEXATTR = 17;
}

// Create inode log entry
message CreateInodeLogEntry {
    uint64 inode_id = 1;
    uint64 parent_id = 2;
    string name = 3;
    FileAttributes attributes = 4;
    bool is_directory = 5;
    string target = 6; // For symlinks
}

// Delete inode log entry
message DeleteInodeLogEntry {
    uint64 inode_id = 1;
    uint64 parent_id = 2;
    string name = 3;
}

// Update inode log entry
message UpdateInodeLogEntry {
    uint64 inode_id = 1;
    FileAttributes attributes = 2;
    repeated string field_mask = 3; // Which fields to update
}

// Create chunk log entry
message CreateChunkLogEntry {
    string chunk_handle = 1;
    uint64 inode_id = 2;
    uint64 chunk_index = 3;
    uint32 version = 4;
    repeated ChunkLocation locations = 5;
    int64 size = 6;
    string checksum = 7;
}

// Delete chunk log entry
message DeleteChunkLogEntry {
    string chunk_handle = 1;
    uint64 inode_id = 2;
    uint64 chunk_index = 3;
}

// Update chunk log entry
message UpdateChunkLogEntry {
    string chunk_handle = 1;
    uint32 version = 2;
    repeated ChunkLocation locations = 3;
    int64 size = 4;
    string checksum = 5;
}

// Lease grant log entry
message LeaseGrantLogEntry {
    string chunk_handle = 1;
    string primary_server = 2;
    repeated string replica_servers = 3;
    int64 lease_expiry = 4;
    uint32 version = 5;
}

// Lease revoke log entry
message LeaseRevokeLogEntry {
    string chunk_handle = 1;
    string primary_server = 2;
    uint32 version = 3;
}

// Checkpoint log entry
message CheckpointLogEntry {
    int64 timestamp = 1;
    uint64 last_sequence_number = 2;
    string checkpoint_path = 3;
    string checksum = 4;
}

// Directory operation log entries
message MkdirLogEntry {
    uint64 parent_id = 1;
    string name = 2;
    uint64 inode_id = 3;
    FileAttributes attributes = 4;
}

message RmdirLogEntry {
    uint64 parent_id = 1;
    string name = 2;
    uint64 inode_id = 3;
}

message RenameLogEntry {
    uint64 old_parent_id = 1;
    string old_name = 2;
    uint64 new_parent_id = 3;
    string new_name = 4;
    uint64 inode_id = 5;
}

message SymlinkLogEntry {
    uint64 parent_id = 1;
    string name = 2;
    string target = 3;
    uint64 inode_id = 4;
    FileAttributes attributes = 5;
}

message UnlinkLogEntry {
    uint64 parent_id = 1;
    string name = 2;
    uint64 inode_id = 3;
}

message SetattrLogEntry {
    uint64 inode_id = 1;
    FileAttributes attributes = 2;
    repeated string field_mask = 3;
}

message SetxattrLogEntry {
    uint64 inode_id = 1;
    string name = 2;
    bytes value = 3;
    uint32 flags = 4;
}

message RemovexattrLogEntry {
    uint64 inode_id = 1;
    string name = 2;
}

// Generic log entry wrapper
message LogEntry {
    uint64 sequence_number = 1;
    int64 timestamp = 2;
    LogEntryType type = 3;
    string operation_id = 4; // For idempotency
    uint32 checksum = 5; // CRC32 checksum of the data
    
    oneof data {
        CreateInodeLogEntry create_inode = 10;
        DeleteInodeLogEntry delete_inode = 11;
        UpdateInodeLogEntry update_inode = 12;
        CreateChunkLogEntry create_chunk = 13;
        DeleteChunkLogEntry delete_chunk = 14;
        UpdateChunkLogEntry update_chunk = 15;
        LeaseGrantLogEntry lease_grant = 16;
        LeaseRevokeLogEntry lease_revoke = 17;
        CheckpointLogEntry checkpoint = 18;
        MkdirLogEntry mkdir = 19;
        RmdirLogEntry rmdir = 20;
        RenameLogEntry rename = 21;
        SymlinkLogEntry symlink = 22;
        UnlinkLogEntry unlink = 23;
        SetattrLogEntry setattr = 24;
        SetxattrLogEntry setxattr = 25;
        RemovexattrLogEntry removexattr = 26;
    }
}

// Log file header for binary log files
message LogFileHeader {
    uint32 magic = 1; // Magic number for file identification
    uint32 version = 2; // Log format version
    int64 created_at = 3; // Creation timestamp
    string node_id = 4; // Node that created this log
    uint64 start_sequence = 5; // First sequence number in this file
}

// Checkpoint metadata
message CheckpointMetadata {
    int64 timestamp = 1;
    uint64 sequence_number = 2;
    string log_file_path = 3;
    uint64 log_file_offset = 4;
    string checksum = 5;
    map<string, string> metadata = 6;
}